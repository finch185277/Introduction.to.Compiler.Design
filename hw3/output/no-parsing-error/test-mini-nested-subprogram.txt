[  Shift  ] | PROGRAM
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | RPAREN
[  Shift  ] | SEMICOLON
[Reduction] | lambda:
[Reduction] | declarations: lambda
[  Shift  ] | VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[  Shift  ] | SEMICOLON
[Reduction] | declarations: declarations VAR identifier_list : type ;
[  Shift  ] | VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COLON
[  Shift  ] | ARRAY
[  Shift  ] | LBRAC
[  Shift  ] | NUM
[  Shift  ] | DOTDOT
[  Shift  ] | NUM
[  Shift  ] | RBRAC
[  Shift  ] | OF
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[Reduction] | type: ARRAY [ num .. num ] OF type
[  Shift  ] | SEMICOLON
[Reduction] | declarations: declarations VAR identifier_list : type ;
[  Shift  ] | PROCEDURE
[Reduction] | lambda:
[Reduction] | subprogram_declarations: lambda
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | VAR
[Reduction] | optional_var: VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[  Shift  ] | SEMICOLON
[  Shift  ] | VAR
[Reduction] | optional_var: VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COLON
[  Shift  ] | ARRAY
[  Shift  ] | LBRAC
[  Shift  ] | NUM
[  Shift  ] | DOTDOT
[  Shift  ] | NUM
[  Shift  ] | RBRAC
[  Shift  ] | OF
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[Reduction] | type: ARRAY [ num .. num ] OF type
[  Shift  ] | RPAREN
[Reduction] | parameter_list: optional_var identifier_list : type
[Reduction] | parameter_list: optional_var identifier_list : type ; parameter_list
[Reduction] | arguments: ( parameter_list )
[  Shift  ] | SEMICOLON
[Reduction] | subprogram_head: PROCEDURE id arguments ;
[Reduction] | lambda:
[Reduction] | declarations: lambda
[  Shift  ] | PBEGIN
[Reduction] | lambda:
[Reduction] | subprogram_declarations: lambda
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | SEMICOLON
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement
[  Shift  ] | WHILE
[  Shift  ] | NOT
[  Shift  ] | IDENTIFIER
[  Shift  ] | DO
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | factor: not factor
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | PBEGIN
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[  Shift  ] | LBRAC
[  Shift  ] | IDENTIFIER
[  Shift  ] | RBRAC
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | RPAREN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | tail: [ expression ] tail
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression
[Reduction] | procedure_statement: id ( expression_list )
[Reduction] | statement: procedure_statement
[Reduction] | statement_list: statement
[  Shift  ] | SEMICOLON
[  Shift  ] | IF
[  Shift  ] | NOT
[  Shift  ] | IDENTIFIER
[  Shift  ] | THEN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | factor: not factor
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | PLUS
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | addop: +
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | ELSE
[Reduction] | simple_expression: simple_expression addop term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[  Shift  ] | END
[Reduction] | lambda:
[Reduction] | statement: lambda
[Reduction] | statement: IF expression THEN statement ELSE statement
[Reduction] | statement_list: statement_list ; statement
[Reduction] | optional_statements: statement_list
[Reduction] | compound_statement: begin optional_statements end
[Reduction] | statement: compound_statement
[Reduction] | statement: WHILE expression DO statement
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | END
[Reduction] | optional_statements: statement_list
[Reduction] | compound_statement: begin optional_statements end
[Reduction] | subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement
[  Shift  ] | SEMICOLON
[Reduction] | subprogram_declarations: subprogram_declarations subprogram_declaration ;
[  Shift  ] | PROCEDURE
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[Reduction] | lambda:
[Reduction] | optional_var: lambda
[Reduction] | identifier_list: id
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[  Shift  ] | SEMICOLON
[  Shift  ] | VAR
[Reduction] | optional_var: VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COLON
[  Shift  ] | ARRAY
[  Shift  ] | LBRAC
[  Shift  ] | NUM
[  Shift  ] | DOTDOT
[  Shift  ] | NUM
[  Shift  ] | RBRAC
[  Shift  ] | OF
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[Reduction] | type: ARRAY [ num .. num ] OF type
[  Shift  ] | RPAREN
[Reduction] | parameter_list: optional_var identifier_list : type
[Reduction] | parameter_list: optional_var identifier_list : type ; parameter_list
[Reduction] | arguments: ( parameter_list )
[  Shift  ] | SEMICOLON
[Reduction] | subprogram_head: PROCEDURE id arguments ;
[Reduction] | lambda:
[Reduction] | declarations: lambda
[  Shift  ] | PROCEDURE
[Reduction] | lambda:
[Reduction] | subprogram_declarations: lambda
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[Reduction] | lambda:
[Reduction] | optional_var: lambda
[Reduction] | identifier_list: id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[  Shift  ] | RPAREN
[Reduction] | parameter_list: optional_var identifier_list : type
[Reduction] | arguments: ( parameter_list )
[  Shift  ] | SEMICOLON
[Reduction] | subprogram_head: PROCEDURE id arguments ;
[Reduction] | lambda:
[Reduction] | declarations: lambda
[  Shift  ] | VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[  Shift  ] | SEMICOLON
[Reduction] | declarations: declarations VAR identifier_list : type ;
[  Shift  ] | VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[  Shift  ] | SEMICOLON
[Reduction] | declarations: declarations VAR identifier_list : type ;
[  Shift  ] | FUNCTION
[Reduction] | lambda:
[Reduction] | subprogram_declarations: lambda
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[Reduction] | lambda:
[Reduction] | optional_var: lambda
[Reduction] | identifier_list: id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[  Shift  ] | RPAREN
[Reduction] | parameter_list: optional_var identifier_list : type
[Reduction] | arguments: ( parameter_list )
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[  Shift  ] | SEMICOLON
[Reduction] | subprogram_head: FUNCTION id arguments : standard_type ;
[Reduction] | lambda:
[Reduction] | declarations: lambda
[  Shift  ] | VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[  Shift  ] | SEMICOLON
[Reduction] | declarations: declarations VAR identifier_list : type ;
[  Shift  ] | VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[  Shift  ] | SEMICOLON
[Reduction] | declarations: declarations VAR identifier_list : type ;
[  Shift  ] | PROCEDURE
[Reduction] | lambda:
[Reduction] | subprogram_declarations: lambda
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | VAR
[Reduction] | optional_var: VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[  Shift  ] | RPAREN
[Reduction] | parameter_list: optional_var identifier_list : type
[Reduction] | arguments: ( parameter_list )
[  Shift  ] | SEMICOLON
[Reduction] | subprogram_head: PROCEDURE id arguments ;
[Reduction] | lambda:
[Reduction] | declarations: lambda
[  Shift  ] | VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[  Shift  ] | SEMICOLON
[Reduction] | declarations: declarations VAR identifier_list : type ;
[  Shift  ] | PBEGIN
[Reduction] | lambda:
[Reduction] | subprogram_declarations: lambda
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | SEMICOLON
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | SEMICOLON
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | END
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement_list ; statement
[Reduction] | optional_statements: statement_list
[Reduction] | compound_statement: begin optional_statements end
[Reduction] | subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement
[  Shift  ] | SEMICOLON
[Reduction] | subprogram_declarations: subprogram_declarations subprogram_declaration ;
[  Shift  ] | PBEGIN
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | LBRAC
[  Shift  ] | IDENTIFIER
[  Shift  ] | RBRAC
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | SEMICOLON
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | tail: [ expression ] tail
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | PLUS
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | addop: +
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | SEMICOLON
[Reduction] | simple_expression: simple_expression addop term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | SEMICOLON
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | WHILE
[  Shift  ] | IDENTIFIER
[  Shift  ] | LE
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | relop: <=
[  Shift  ] | IDENTIFIER
[  Shift  ] | DO
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression relop simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | PBEGIN
[  Shift  ] | WHILE
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[  Shift  ] | LE
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | relop: <=
[  Shift  ] | IDENTIFIER
[  Shift  ] | RPAREN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression relop simple_expression
[Reduction] | expression: boolexpression
[Reduction] | factor: ( expression )
[Reduction] | term: factor
[  Shift  ] | AND
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[  Shift  ] | LBRAC
[  Shift  ] | IDENTIFIER
[  Shift  ] | RBRAC
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | LT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | tail: [ expression ] tail
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | relop: <
[  Shift  ] | IDENTIFIER
[  Shift  ] | RPAREN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression relop simple_expression
[Reduction] | expression: boolexpression
[Reduction] | factor: ( expression )
[Reduction] | term: factor
[  Shift  ] | DO
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression AND boolexpression
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | PLUS
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | addop: +
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | SEMICOLON
[Reduction] | simple_expression: simple_expression addop term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement: WHILE expression DO statement
[Reduction] | statement_list: statement
[  Shift  ] | WHILE
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[  Shift  ] | GT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | relop: >
[  Shift  ] | IDENTIFIER
[  Shift  ] | RPAREN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression relop simple_expression
[Reduction] | expression: boolexpression
[Reduction] | factor: ( expression )
[Reduction] | term: factor
[  Shift  ] | AND
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[  Shift  ] | LBRAC
[  Shift  ] | IDENTIFIER
[  Shift  ] | RBRAC
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | GE
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | tail: [ expression ] tail
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | relop: >=
[  Shift  ] | IDENTIFIER
[  Shift  ] | RPAREN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression relop simple_expression
[Reduction] | expression: boolexpression
[Reduction] | factor: ( expression )
[Reduction] | term: factor
[  Shift  ] | DO
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression AND boolexpression
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | MINUS
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | addop: -
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | SEMICOLON
[Reduction] | simple_expression: simple_expression addop term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement: WHILE expression DO statement
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | IF
[  Shift  ] | IDENTIFIER
[  Shift  ] | LT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | relop: <
[  Shift  ] | IDENTIFIER
[  Shift  ] | THEN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression relop simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[  Shift  ] | LBRAC
[  Shift  ] | IDENTIFIER
[  Shift  ] | RBRAC
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | COMMA
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | tail: [ expression ] tail
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression
[  Shift  ] | IDENTIFIER
[  Shift  ] | LBRAC
[  Shift  ] | IDENTIFIER
[  Shift  ] | RBRAC
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | RPAREN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | tail: [ expression ] tail
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression_list , expression
[Reduction] | procedure_statement: id ( expression_list )
[Reduction] | statement: procedure_statement
[  Shift  ] | ELSE
[  Shift  ] | END
[Reduction] | lambda:
[Reduction] | statement: lambda
[Reduction] | statement: IF expression THEN statement ELSE statement
[Reduction] | statement_list: statement_list ; statement
[Reduction] | optional_statements: statement_list
[Reduction] | compound_statement: begin optional_statements end
[Reduction] | statement: compound_statement
[Reduction] | statement: WHILE expression DO statement
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | SEMICOLON
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[  Shift  ] | LBRAC
[  Shift  ] | IDENTIFIER
[  Shift  ] | RBRAC
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | COMMA
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | tail: [ expression ] tail
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression
[  Shift  ] | IDENTIFIER
[  Shift  ] | LBRAC
[  Shift  ] | IDENTIFIER
[  Shift  ] | RBRAC
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | RPAREN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | tail: [ expression ] tail
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression_list , expression
[Reduction] | procedure_statement: id ( expression_list )
[Reduction] | statement: procedure_statement
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | SEMICOLON
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | END
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement_list ; statement
[Reduction] | optional_statements: statement_list
[Reduction] | compound_statement: begin optional_statements end
[Reduction] | subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement
[  Shift  ] | SEMICOLON
[Reduction] | subprogram_declarations: subprogram_declarations subprogram_declaration ;
[  Shift  ] | PBEGIN
[  Shift  ] | IF
[  Shift  ] | IDENTIFIER
[  Shift  ] | LT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | relop: <
[  Shift  ] | IDENTIFIER
[  Shift  ] | THEN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression relop simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | PBEGIN
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[  Shift  ] | COMMA
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression
[  Shift  ] | IDENTIFIER
[  Shift  ] | RPAREN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression_list , expression
[Reduction] | factor: id ( expression_list )
[Reduction] | term: factor
[  Shift  ] | SEMICOLON
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[  Shift  ] | COMMA
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression
[  Shift  ] | IDENTIFIER
[  Shift  ] | MINUS
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | addop: -
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | RPAREN
[Reduction] | simple_expression: simple_expression addop term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression_list , expression
[Reduction] | procedure_statement: id ( expression_list )
[Reduction] | statement: procedure_statement
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | SEMICOLON
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[  Shift  ] | PLUS
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | addop: +
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | COMMA
[Reduction] | simple_expression: simple_expression addop term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression
[  Shift  ] | IDENTIFIER
[  Shift  ] | RPAREN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression_list , expression
[Reduction] | procedure_statement: id ( expression_list )
[Reduction] | statement: procedure_statement
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | SEMICOLON
[  Shift  ] | END
[Reduction] | lambda:
[Reduction] | statement: lambda
[Reduction] | statement_list: statement_list ; statement
[Reduction] | optional_statements: statement_list
[Reduction] | compound_statement: begin optional_statements end
[Reduction] | statement: compound_statement
[  Shift  ] | ELSE
[  Shift  ] | END
[Reduction] | lambda:
[Reduction] | statement: lambda
[Reduction] | statement: IF expression THEN statement ELSE statement
[Reduction] | statement_list: statement
[Reduction] | optional_statements: statement_list
[Reduction] | compound_statement: begin optional_statements end
[Reduction] | subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement
[  Shift  ] | SEMICOLON
[Reduction] | subprogram_declarations: subprogram_declarations subprogram_declaration ;
[  Shift  ] | PBEGIN
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | COMMA
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression
[  Shift  ] | IDENTIFIER
[  Shift  ] | RPAREN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression_list , expression
[Reduction] | procedure_statement: id ( expression_list )
[Reduction] | statement: procedure_statement
[Reduction] | statement_list: statement
[  Shift  ] | END
[Reduction] | optional_statements: statement_list
[Reduction] | compound_statement: begin optional_statements end
[Reduction] | subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement
[  Shift  ] | SEMICOLON
[Reduction] | subprogram_declarations: subprogram_declarations subprogram_declaration ;
[  Shift  ] | PBEGIN
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[  Shift  ] | COMMA
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression
[  Shift  ] | IDENTIFIER
[  Shift  ] | RPAREN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression_list , expression
[Reduction] | procedure_statement: id ( expression_list )
[Reduction] | statement: procedure_statement
[Reduction] | statement_list: statement
[  Shift  ] | SEMICOLON
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[  Shift  ] | COMMA
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression
[  Shift  ] | IDENTIFIER
[  Shift  ] | RPAREN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression_list , expression
[Reduction] | procedure_statement: id ( expression_list )
[Reduction] | statement: procedure_statement
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | SEMICOLON
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | SEMICOLON
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | WHILE
[  Shift  ] | IDENTIFIER
[  Shift  ] | LE
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | relop: <=
[  Shift  ] | IDENTIFIER
[  Shift  ] | DO
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression relop simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[  Shift  ] | LBRAC
[  Shift  ] | IDENTIFIER
[  Shift  ] | RBRAC
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | RPAREN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | tail: [ expression ] tail
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression
[Reduction] | procedure_statement: id ( expression_list )
[Reduction] | statement: procedure_statement
[Reduction] | statement: WHILE expression DO statement
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | END
[Reduction] | optional_statements: statement_list
[Reduction] | compound_statement: begin optional_statements end
[  Shift  ] | DOT
[Reduction] | prog: PROGRAM id ( identifier_list ) ; declarations subprogram_declarations compound_statement .
OK
------------------------- AST -------------------------
prog
  PROGRAM
  IDENTIFIER
  LPAREN
  identifier_list
    identifier_list
      IDENTIFIER
    COMMA
    IDENTIFIER
  RPAREN
  SEMICOLON
  declarations
    declarations
      declarations
        lambda
      VAR
      identifier_list
        identifier_list
          identifier_list
            identifier_list
              IDENTIFIER
            COMMA
            IDENTIFIER
          COMMA
          IDENTIFIER
        COMMA
        IDENTIFIER
      COLON
      type
        standard_type
          INTEGER
      SEMICOLON
    VAR
    identifier_list
      IDENTIFIER
    COLON
    type
      ARRAY
      LBRAC
      NUM
      DOTDOT
      NUM
      RBRAC
      OF
      type
        standard_type
          INTEGER
    SEMICOLON
  subprogram_declarations
    subprogram_declarations
      subprogram_declarations
        lambda
      subprogram_declaration
        subprogram_head
          PROCEDURE
          IDENTIFIER
          arguments
            LPAREN
            parameter_list
              optional_var
                VAR
              identifier_list
                IDENTIFIER
              COLON
              type
                standard_type
                  INTEGER
              SEMICOLON
              parameter_list
                optional_var
                  VAR
                identifier_list
                  IDENTIFIER
                COLON
                type
                  ARRAY
                  LBRAC
                  NUM
                  DOTDOT
                  NUM
                  RBRAC
                  OF
                  type
                    standard_type
                      INTEGER
            RPAREN
          SEMICOLON
        declarations
          lambda
        subprogram_declarations
          lambda
        compound_statement
          PBEGIN
          optional_statements
            statement_list
              statement_list
                statement
                  variable
                    IDENTIFIER
                    tail
                      lambda
                  ASSIGNMENT
                  expression
                    boolexpression
                      simple_expression
                        term
                          factor
                            NUM
              SEMICOLON
              statement
                WHILE
                expression
                  boolexpression
                    simple_expression
                      term
                        factor
                          NOT
                          factor
                            IDENTIFIER
                            tail
                              lambda
                DO
                statement
                  compound_statement
                    PBEGIN
                    optional_statements
                      statement_list
                        statement_list
                          statement
                            procedure_statement
                              IDENTIFIER
                              LBRAC
                              expression_list
                                expression
                                  boolexpression
                                    simple_expression
                                      term
                                        factor
                                          IDENTIFIER
                                          tail
                                            LBRAC
                                            expression
                                              boolexpression
                                                simple_expression
                                                  term
                                                    factor
                                                      IDENTIFIER
                                                      tail
                                                        lambda
                                            RBRAC
                                            tail
                                              lambda
                              RPAREN
                        SEMICOLON
                        statement
                          IF
                          expression
                            boolexpression
                              simple_expression
                                term
                                  factor
                                    NOT
                                    factor
                                      IDENTIFIER
                                      tail
                                        lambda
                          THEN
                          statement
                            variable
                              IDENTIFIER
                              tail
                                lambda
                            ASSIGNMENT
                            expression
                              boolexpression
                                simple_expression
                                  simple_expression
                                    term
                                      factor
                                        IDENTIFIER
                                        tail
                                          lambda
                                  addop
                                    PLUS
                                  term
                                    factor
                                      NUM
                          ELSE
                          statement
                            lambda
                    END
          END
      SEMICOLON
    subprogram_declaration
      subprogram_head
        PROCEDURE
        IDENTIFIER
        arguments
          LPAREN
          parameter_list
            optional_var
              lambda
            identifier_list
              IDENTIFIER
            COLON
            type
              standard_type
                INTEGER
            SEMICOLON
            parameter_list
              optional_var
                VAR
              identifier_list
                IDENTIFIER
              COLON
              type
                ARRAY
                LBRAC
                NUM
                DOTDOT
                NUM
                RBRAC
                OF
                type
                  standard_type
                    INTEGER
          RPAREN
        SEMICOLON
      declarations
        lambda
      subprogram_declarations
        subprogram_declarations
          lambda
        subprogram_declaration
          subprogram_head
            PROCEDURE
            IDENTIFIER
            arguments
              LPAREN
              parameter_list
                optional_var
                  lambda
                identifier_list
                  identifier_list
                    IDENTIFIER
                  COMMA
                  IDENTIFIER
                COLON
                type
                  standard_type
                    INTEGER
              RPAREN
            SEMICOLON
          declarations
            declarations
              declarations
                lambda
              VAR
              identifier_list
                IDENTIFIER
              COLON
              type
                standard_type
                  INTEGER
              SEMICOLON
            VAR
            identifier_list
              IDENTIFIER
            COLON
            type
              standard_type
                INTEGER
            SEMICOLON
          subprogram_declarations
            subprogram_declarations
              lambda
            subprogram_declaration
              subprogram_head
                FUNCTION
                IDENTIFIER
                arguments
                  LPAREN
                  parameter_list
                    optional_var
                      lambda
                    identifier_list
                      identifier_list
                        IDENTIFIER
                      COMMA
                      IDENTIFIER
                    COLON
                    type
                      standard_type
                        INTEGER
                  RPAREN
                COLON
                standard_type
                  INTEGER
                SEMICOLON
              declarations
                declarations
                  declarations
                    lambda
                  VAR
                  identifier_list
                    identifier_list
                      IDENTIFIER
                    COMMA
                    IDENTIFIER
                  COLON
                  type
                    standard_type
                      INTEGER
                  SEMICOLON
                VAR
                identifier_list
                  IDENTIFIER
                COLON
                type
                  standard_type
                    INTEGER
                SEMICOLON
              subprogram_declarations
                subprogram_declarations
                  lambda
                subprogram_declaration
                  subprogram_head
                    PROCEDURE
                    IDENTIFIER
                    arguments
                      LPAREN
                      parameter_list
                        optional_var
                          VAR
                        identifier_list
                          identifier_list
                            IDENTIFIER
                          COMMA
                          IDENTIFIER
                        COLON
                        type
                          standard_type
                            INTEGER
                      RPAREN
                    SEMICOLON
                  declarations
                    declarations
                      lambda
                    VAR
                    identifier_list
                      IDENTIFIER
                    COLON
                    type
                      standard_type
                        INTEGER
                    SEMICOLON
                  subprogram_declarations
                    lambda
                  compound_statement
                    PBEGIN
                    optional_statements
                      statement_list
                        statement_list
                          statement_list
                            statement
                              variable
                                IDENTIFIER
                                tail
                                  lambda
                              ASSIGNMENT
                              expression
                                boolexpression
                                  simple_expression
                                    term
                                      factor
                                        IDENTIFIER
                                        tail
                                          lambda
                          SEMICOLON
                          statement
                            variable
                              IDENTIFIER
                              tail
                                lambda
                            ASSIGNMENT
                            expression
                              boolexpression
                                simple_expression
                                  term
                                    factor
                                      IDENTIFIER
                                      tail
                                        lambda
                        SEMICOLON
                        statement
                          variable
                            IDENTIFIER
                            tail
                              lambda
                          ASSIGNMENT
                          expression
                            boolexpression
                              simple_expression
                                term
                                  factor
                                    IDENTIFIER
                                    tail
                                      lambda
                    END
                SEMICOLON
              compound_statement
                PBEGIN
                optional_statements
                  statement_list
                    statement_list
                      statement_list
                        statement_list
                          statement_list
                            statement_list
                              statement
                                variable
                                  IDENTIFIER
                                  tail
                                    lambda
                                ASSIGNMENT
                                expression
                                  boolexpression
                                    simple_expression
                                      term
                                        factor
                                          IDENTIFIER
                                          tail
                                            LBRAC
                                            expression
                                              boolexpression
                                                simple_expression
                                                  term
                                                    factor
                                                      IDENTIFIER
                                                      tail
                                                        lambda
                                            RBRAC
                                            tail
                                              lambda
                            SEMICOLON
                            statement
                              variable
                                IDENTIFIER
                                tail
                                  lambda
                              ASSIGNMENT
                              expression
                                boolexpression
                                  simple_expression
                                    simple_expression
                                      term
                                        factor
                                          IDENTIFIER
                                          tail
                                            lambda
                                    addop
                                      PLUS
                                    term
                                      factor
                                        NUM
                          SEMICOLON
                          statement
                            variable
                              IDENTIFIER
                              tail
                                lambda
                            ASSIGNMENT
                            expression
                              boolexpression
                                simple_expression
                                  term
                                    factor
                                      IDENTIFIER
                                      tail
                                        lambda
                        SEMICOLON
                        statement
                          WHILE
                          expression
                            boolexpression
                              simple_expression
                                term
                                  factor
                                    IDENTIFIER
                                    tail
                                      lambda
                              relop
                                LE
                              simple_expression
                                term
                                  factor
                                    IDENTIFIER
                                    tail
                                      lambda
                          DO
                          statement
                            compound_statement
                              PBEGIN
                              optional_statements
                                statement_list
                                  statement_list
                                    statement_list
                                      statement
                                        WHILE
                                        expression
                                          boolexpression
                                            simple_expression
                                              term
                                                factor
                                                  LPAREN
                                                  expression
                                                    boolexpression
                                                      simple_expression
                                                        term
                                                          factor
                                                            IDENTIFIER
                                                            tail
                                                              lambda
                                                      relop
                                                        LE
                                                      simple_expression
                                                        term
                                                          factor
                                                            IDENTIFIER
                                                            tail
                                                              lambda
                                                  RPAREN
                                          AND
                                          boolexpression
                                            simple_expression
                                              term
                                                factor
                                                  LPAREN
                                                  expression
                                                    boolexpression
                                                      simple_expression
                                                        term
                                                          factor
                                                            IDENTIFIER
                                                            tail
                                                              LBRAC
                                                              expression
                                                                boolexpression
                                                                  simple_expression
                                                                    term
                                                                      factor
                                                                        IDENTIFIER
                                                                        tail
                                                                          lambda
                                                              RBRAC
                                                              tail
                                                                lambda
                                                      relop
                                                        LT
                                                      simple_expression
                                                        term
                                                          factor
                                                            IDENTIFIER
                                                            tail
                                                              lambda
                                                  RPAREN
                                        DO
                                        statement
                                          variable
                                            IDENTIFIER
                                            tail
                                              lambda
                                          ASSIGNMENT
                                          expression
                                            boolexpression
                                              simple_expression
                                                simple_expression
                                                  term
                                                    factor
                                                      IDENTIFIER
                                                      tail
                                                        lambda
                                                addop
                                                  PLUS
                                                term
                                                  factor
                                                    NUM
                                    SEMICOLON
                                    statement
                                      WHILE
                                      expression
                                        boolexpression
                                          simple_expression
                                            term
                                              factor
                                                LPAREN
                                                expression
                                                  boolexpression
                                                    simple_expression
                                                      term
                                                        factor
                                                          IDENTIFIER
                                                          tail
                                                            lambda
                                                    relop
                                                      GT
                                                    simple_expression
                                                      term
                                                        factor
                                                          IDENTIFIER
                                                          tail
                                                            lambda
                                                RPAREN
                                        AND
                                        boolexpression
                                          simple_expression
                                            term
                                              factor
                                                LPAREN
                                                expression
                                                  boolexpression
                                                    simple_expression
                                                      term
                                                        factor
                                                          IDENTIFIER
                                                          tail
                                                            LBRAC
                                                            expression
                                                              boolexpression
                                                                simple_expression
                                                                  term
                                                                    factor
                                                                      IDENTIFIER
                                                                      tail
                                                                        lambda
                                                            RBRAC
                                                            tail
                                                              lambda
                                                    relop
                                                      GE
                                                    simple_expression
                                                      term
                                                        factor
                                                          IDENTIFIER
                                                          tail
                                                            lambda
                                                RPAREN
                                      DO
                                      statement
                                        variable
                                          IDENTIFIER
                                          tail
                                            lambda
                                        ASSIGNMENT
                                        expression
                                          boolexpression
                                            simple_expression
                                              simple_expression
                                                term
                                                  factor
                                                    IDENTIFIER
                                                    tail
                                                      lambda
                                              addop
                                                MINUS
                                              term
                                                factor
                                                  NUM
                                  SEMICOLON
                                  statement
                                    IF
                                    expression
                                      boolexpression
                                        simple_expression
                                          term
                                            factor
                                              IDENTIFIER
                                              tail
                                                lambda
                                        relop
                                          LT
                                        simple_expression
                                          term
                                            factor
                                              IDENTIFIER
                                              tail
                                                lambda
                                    THEN
                                    statement
                                      procedure_statement
                                        IDENTIFIER
                                        LBRAC
                                        expression_list
                                          expression_list
                                            expression
                                              boolexpression
                                                simple_expression
                                                  term
                                                    factor
                                                      IDENTIFIER
                                                      tail
                                                        LBRAC
                                                        expression
                                                          boolexpression
                                                            simple_expression
                                                              term
                                                                factor
                                                                  IDENTIFIER
                                                                  tail
                                                                    lambda
                                                        RBRAC
                                                        tail
                                                          lambda
                                          COMMA
                                          expression
                                            boolexpression
                                              simple_expression
                                                term
                                                  factor
                                                    IDENTIFIER
                                                    tail
                                                      LBRAC
                                                      expression
                                                        boolexpression
                                                          simple_expression
                                                            term
                                                              factor
                                                                IDENTIFIER
                                                                tail
                                                                  lambda
                                                      RBRAC
                                                      tail
                                                        lambda
                                        RPAREN
                                    ELSE
                                    statement
                                      lambda
                              END
                      SEMICOLON
                      statement
                        procedure_statement
                          IDENTIFIER
                          LBRAC
                          expression_list
                            expression_list
                              expression
                                boolexpression
                                  simple_expression
                                    term
                                      factor
                                        IDENTIFIER
                                        tail
                                          LBRAC
                                          expression
                                            boolexpression
                                              simple_expression
                                                term
                                                  factor
                                                    IDENTIFIER
                                                    tail
                                                      lambda
                                          RBRAC
                                          tail
                                            lambda
                            COMMA
                            expression
                              boolexpression
                                simple_expression
                                  term
                                    factor
                                      IDENTIFIER
                                      tail
                                        LBRAC
                                        expression
                                          boolexpression
                                            simple_expression
                                              term
                                                factor
                                                  IDENTIFIER
                                                  tail
                                                    lambda
                                        RBRAC
                                        tail
                                          lambda
                          RPAREN
                    SEMICOLON
                    statement
                      variable
                        IDENTIFIER
                        tail
                          lambda
                      ASSIGNMENT
                      expression
                        boolexpression
                          simple_expression
                            term
                              factor
                                IDENTIFIER
                                tail
                                  lambda
                END
            SEMICOLON
          compound_statement
            PBEGIN
            optional_statements
              statement_list
                statement
                  IF
                  expression
                    boolexpression
                      simple_expression
                        term
                          factor
                            IDENTIFIER
                            tail
                              lambda
                      relop
                        LT
                      simple_expression
                        term
                          factor
                            IDENTIFIER
                            tail
                              lambda
                  THEN
                  statement
                    compound_statement
                      PBEGIN
                      optional_statements
                        statement_list
                          statement_list
                            statement_list
                              statement_list
                                statement
                                  variable
                                    IDENTIFIER
                                    tail
                                      lambda
                                  ASSIGNMENT
                                  expression
                                    boolexpression
                                      simple_expression
                                        term
                                          factor
                                            IDENTIFIER
                                            LPAREN
                                            expression_list
                                              expression_list
                                                expression
                                                  boolexpression
                                                    simple_expression
                                                      term
                                                        factor
                                                          IDENTIFIER
                                                          tail
                                                            lambda
                                              COMMA
                                              expression
                                                boolexpression
                                                  simple_expression
                                                    term
                                                      factor
                                                        IDENTIFIER
                                                        tail
                                                          lambda
                                            RPAREN
                              SEMICOLON
                              statement
                                procedure_statement
                                  IDENTIFIER
                                  LBRAC
                                  expression_list
                                    expression_list
                                      expression
                                        boolexpression
                                          simple_expression
                                            term
                                              factor
                                                IDENTIFIER
                                                tail
                                                  lambda
                                    COMMA
                                    expression
                                      boolexpression
                                        simple_expression
                                          simple_expression
                                            term
                                              factor
                                                IDENTIFIER
                                                tail
                                                  lambda
                                          addop
                                            MINUS
                                          term
                                            factor
                                              NUM
                                  RPAREN
                            SEMICOLON
                            statement
                              procedure_statement
                                IDENTIFIER
                                LBRAC
                                expression_list
                                  expression_list
                                    expression
                                      boolexpression
                                        simple_expression
                                          simple_expression
                                            term
                                              factor
                                                IDENTIFIER
                                                tail
                                                  lambda
                                          addop
                                            PLUS
                                          term
                                            factor
                                              NUM
                                  COMMA
                                  expression
                                    boolexpression
                                      simple_expression
                                        term
                                          factor
                                            IDENTIFIER
                                            tail
                                              lambda
                                RPAREN
                          SEMICOLON
                          statement
                            lambda
                      END
                  ELSE
                  statement
                    lambda
            END
        SEMICOLON
      compound_statement
        PBEGIN
        optional_statements
          statement_list
            statement
              procedure_statement
                IDENTIFIER
                LBRAC
                expression_list
                  expression_list
                    expression
                      boolexpression
                        simple_expression
                          term
                            factor
                              NUM
                  COMMA
                  expression
                    boolexpression
                      simple_expression
                        term
                          factor
                            IDENTIFIER
                            tail
                              lambda
                RPAREN
        END
    SEMICOLON
  compound_statement
    PBEGIN
    optional_statements
      statement_list
        statement_list
          statement_list
            statement_list
              statement
                procedure_statement
                  IDENTIFIER
                  LBRAC
                  expression_list
                    expression_list
                      expression
                        boolexpression
                          simple_expression
                            term
                              factor
                                IDENTIFIER
                                tail
                                  lambda
                    COMMA
                    expression
                      boolexpression
                        simple_expression
                          term
                            factor
                              IDENTIFIER
                              tail
                                lambda
                  RPAREN
            SEMICOLON
            statement
              procedure_statement
                IDENTIFIER
                LBRAC
                expression_list
                  expression_list
                    expression
                      boolexpression
                        simple_expression
                          term
                            factor
                              IDENTIFIER
                              tail
                                lambda
                  COMMA
                  expression
                    boolexpression
                      simple_expression
                        term
                          factor
                            IDENTIFIER
                            tail
                              lambda
                RPAREN
          SEMICOLON
          statement
            variable
              IDENTIFIER
              tail
                lambda
            ASSIGNMENT
            expression
              boolexpression
                simple_expression
                  term
                    factor
                      NUM
        SEMICOLON
        statement
          WHILE
          expression
            boolexpression
              simple_expression
                term
                  factor
                    IDENTIFIER
                    tail
                      lambda
              relop
                LE
              simple_expression
                term
                  factor
                    IDENTIFIER
                    tail
                      lambda
          DO
          statement
            procedure_statement
              IDENTIFIER
              LBRAC
              expression_list
                expression
                  boolexpression
                    simple_expression
                      term
                        factor
                          IDENTIFIER
                          tail
                            LBRAC
                            expression
                              boolexpression
                                simple_expression
                                  term
                                    factor
                                      IDENTIFIER
                                      tail
                                        lambda
                            RBRAC
                            tail
                              lambda
              RPAREN
    END
  DOT
------------------------- END -------------------------
