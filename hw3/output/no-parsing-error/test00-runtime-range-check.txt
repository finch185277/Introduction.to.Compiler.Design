[  Shift  ] | PROGRAM
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | RPAREN
[  Shift  ] | SEMICOLON
[Reduction] | lambda:
[Reduction] | declarations: lambda
[  Shift  ] | VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[  Shift  ] | SEMICOLON
[Reduction] | declarations: declarations VAR identifier_list : type ;
[  Shift  ] | VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | COLON
[  Shift  ] | ARRAY
[  Shift  ] | LBRAC
[  Shift  ] | NUM
[  Shift  ] | DOTDOT
[  Shift  ] | NUM
[  Shift  ] | RBRAC
[  Shift  ] | OF
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[Reduction] | type: ARRAY [ num .. num ] OF type
[  Shift  ] | SEMICOLON
[Reduction] | declarations: declarations VAR identifier_list : type ;
[  Shift  ] | VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | COLON
[  Shift  ] | REAL
[Reduction] | standard_type: REAL
[Reduction] | type: standard_type
[  Shift  ] | SEMICOLON
[Reduction] | declarations: declarations VAR identifier_list : type ;
[  Shift  ] | VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COLON
[  Shift  ] | ARRAY
[  Shift  ] | LBRAC
[  Shift  ] | NUM
[  Shift  ] | DOTDOT
[  Shift  ] | NUM
[  Shift  ] | RBRAC
[  Shift  ] | OF
[  Shift  ] | ARRAY
[  Shift  ] | LBRAC
[  Shift  ] | NUM
[  Shift  ] | DOTDOT
[  Shift  ] | NUM
[  Shift  ] | RBRAC
[  Shift  ] | OF
[  Shift  ] | REAL
[Reduction] | standard_type: REAL
[Reduction] | type: standard_type
[Reduction] | type: ARRAY [ num .. num ] OF type
[Reduction] | type: ARRAY [ num .. num ] OF type
[  Shift  ] | SEMICOLON
[Reduction] | declarations: declarations VAR identifier_list : type ;
[  Shift  ] | PROCEDURE
[Reduction] | lambda:
[Reduction] | subprogram_declarations: lambda
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[Reduction] | lambda:
[Reduction] | optional_var: lambda
[Reduction] | identifier_list: id
[  Shift  ] | COLON
[  Shift  ] | ARRAY
[  Shift  ] | LBRAC
[  Shift  ] | NUM
[  Shift  ] | DOTDOT
[  Shift  ] | NUM
[  Shift  ] | RBRAC
[  Shift  ] | OF
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[Reduction] | type: ARRAY [ num .. num ] OF type
[  Shift  ] | RPAREN
[Reduction] | parameter_list: optional_var identifier_list : type
[Reduction] | arguments: ( parameter_list )
[  Shift  ] | SEMICOLON
[Reduction] | subprogram_head: PROCEDURE id arguments ;
[Reduction] | lambda:
[Reduction] | declarations: lambda
[  Shift  ] | VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[  Shift  ] | SEMICOLON
[Reduction] | declarations: declarations VAR identifier_list : type ;
[  Shift  ] | PBEGIN
[Reduction] | lambda:
[Reduction] | subprogram_declarations: lambda
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | END
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement
[Reduction] | optional_statements: statement_list
[Reduction] | compound_statement: begin optional_statements end
[Reduction] | subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement
[  Shift  ] | SEMICOLON
[Reduction] | subprogram_declarations: subprogram_declarations subprogram_declaration ;
[  Shift  ] | FUNCTION
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[Reduction] | lambda:
[Reduction] | optional_var: lambda
[Reduction] | identifier_list: id
[  Shift  ] | COMMA
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: identifier_list , id
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[  Shift  ] | RPAREN
[Reduction] | parameter_list: optional_var identifier_list : type
[Reduction] | arguments: ( parameter_list )
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[  Shift  ] | SEMICOLON
[Reduction] | subprogram_head: FUNCTION id arguments : standard_type ;
[Reduction] | lambda:
[Reduction] | declarations: lambda
[  Shift  ] | VAR
[  Shift  ] | IDENTIFIER
[Reduction] | identifier_list: id
[  Shift  ] | COLON
[  Shift  ] | INTEGER
[Reduction] | standard_type: INTEGER
[Reduction] | type: standard_type
[  Shift  ] | SEMICOLON
[Reduction] | declarations: declarations VAR identifier_list : type ;
[  Shift  ] | PBEGIN
[Reduction] | lambda:
[Reduction] | subprogram_declarations: lambda
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | PLUS
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | addop: +
[  Shift  ] | IDENTIFIER
[  Shift  ] | END
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: simple_expression addop term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement
[Reduction] | optional_statements: statement_list
[Reduction] | compound_statement: begin optional_statements end
[Reduction] | subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement
[  Shift  ] | SEMICOLON
[Reduction] | subprogram_declarations: subprogram_declarations subprogram_declaration ;
[  Shift  ] | PBEGIN
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | SEMICOLON
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement
[  Shift  ] | WHILE
[  Shift  ] | IDENTIFIER
[  Shift  ] | LT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | relop: <
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | DO
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression relop simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | PBEGIN
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | PLUS
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | addop: +
[  Shift  ] | IDENTIFIER
[  Shift  ] | SEMICOLON
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: simple_expression addop term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | PLUS
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | addop: +
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | END
[Reduction] | simple_expression: simple_expression addop term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement_list ; statement
[Reduction] | optional_statements: statement_list
[Reduction] | compound_statement: begin optional_statements end
[Reduction] | statement: compound_statement
[Reduction] | statement: WHILE expression DO statement
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | SEMICOLON
[  Shift  ] | PBEGIN
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | SEMICOLON
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement
[  Shift  ] | WHILE
[  Shift  ] | IDENTIFIER
[  Shift  ] | LT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | relop: <
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | DO
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression relop simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | PBEGIN
[  Shift  ] | IDENTIFIER
[  Shift  ] | LBRAC
[  Shift  ] | IDENTIFIER
[  Shift  ] | RBRAC
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | tail: [ expression ] tail
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | PLUS
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | addop: +
[  Shift  ] | IDENTIFIER
[  Shift  ] | STAR
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | mulop: *
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[  Shift  ] | MINUS
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | addop: -
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | RPAREN
[Reduction] | simple_expression: simple_expression addop term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | factor: ( expression )
[Reduction] | term: term mulop factor
[  Shift  ] | SEMICOLON
[Reduction] | simple_expression: simple_expression addop term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement
[  Shift  ] | IDENTIFIER
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | PLUS
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | addop: +
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | END
[Reduction] | simple_expression: simple_expression addop term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement_list ; statement
[Reduction] | optional_statements: statement_list
[Reduction] | compound_statement: begin optional_statements end
[Reduction] | statement: compound_statement
[Reduction] | statement: WHILE expression DO statement
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | SEMICOLON
[  Shift  ] | IDENTIFIER
[  Shift  ] | LPAREN
[  Shift  ] | IDENTIFIER
[  Shift  ] | RPAREN
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | expression_list: expression
[Reduction] | procedure_statement: id ( expression_list )
[Reduction] | statement: procedure_statement
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | END
[Reduction] | optional_statements: statement_list
[Reduction] | compound_statement: begin optional_statements end
[Reduction] | statement: compound_statement
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | SEMICOLON
[  Shift  ] | IDENTIFIER
[  Shift  ] | LBRAC
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | RBRAC
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | LBRAC
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | RBRAC
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | tail: [ expression ] tail
[Reduction] | tail: [ expression ] tail
[Reduction] | variable: id tail
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | SEMICOLON
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | IDENTIFIER
[  Shift  ] | LBRAC
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | RBRAC
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | LBRAC
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | RBRAC
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | tail: [ expression ] tail
[Reduction] | tail: [ expression ] tail
[Reduction] | variable: id tail
[  Shift  ] | IDENTIFIER
[  Shift  ] | LBRAC
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | RBRAC
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | LBRAC
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | RBRAC
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | PLUS
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | tail: [ expression ] tail
[Reduction] | tail: [ expression ] tail
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | addop: +
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | SEMICOLON
[Reduction] | simple_expression: simple_expression addop term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement_list ; statement
[  Shift  ] | IDENTIFIER
[  Shift  ] | LBRAC
[  Shift  ] | IDENTIFIER
[  Shift  ] | PLUS
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | addop: +
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | RBRAC
[Reduction] | simple_expression: simple_expression addop term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | LBRAC
[  Shift  ] | IDENTIFIER
[  Shift  ] | PLUS
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | factor: id tail
[Reduction] | term: factor
[Reduction] | simple_expression: term
[Reduction] | addop: +
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | RBRAC
[Reduction] | simple_expression: simple_expression addop term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[  Shift  ] | ASSIGNMENT
[Reduction] | lambda:
[Reduction] | tail: lambda
[Reduction] | tail: [ expression ] tail
[Reduction] | tail: [ expression ] tail
[Reduction] | variable: id tail
[  Shift  ] | NUM
[Reduction] | factor: num
[Reduction] | term: factor
[  Shift  ] | END
[Reduction] | simple_expression: term
[Reduction] | boolexpression: simple_expression
[Reduction] | expression: boolexpression
[Reduction] | statement: variable := expression
[Reduction] | statement_list: statement_list ; statement
[Reduction] | optional_statements: statement_list
[Reduction] | compound_statement: begin optional_statements end
[  Shift  ] | DOT
[Reduction] | prog: PROGRAM id ( identifier_list ) ; declarations subprogram_declarations compound_statement .
OK
------------------------- AST -------------------------
prog
  PROGRAM
  IDENTIFIER
  LPAREN
  identifier_list
    identifier_list
      identifier_list
        IDENTIFIER
      COMMA
      IDENTIFIER
    COMMA
    IDENTIFIER
  RPAREN
  SEMICOLON
  declarations
    declarations
      declarations
        declarations
          declarations
            lambda
          VAR
          identifier_list
            identifier_list
              identifier_list
                IDENTIFIER
              COMMA
              IDENTIFIER
            COMMA
            IDENTIFIER
          COLON
          type
            standard_type
              INTEGER
          SEMICOLON
        VAR
        identifier_list
          identifier_list
            IDENTIFIER
          COMMA
          IDENTIFIER
        COLON
        type
          ARRAY
          LBRAC
          NUM
          DOTDOT
          NUM
          RBRAC
          OF
          type
            standard_type
              INTEGER
        SEMICOLON
      VAR
      identifier_list
        identifier_list
          IDENTIFIER
        COMMA
        IDENTIFIER
      COLON
      type
        standard_type
          REAL
      SEMICOLON
    VAR
    identifier_list
      IDENTIFIER
    COLON
    type
      ARRAY
      LBRAC
      NUM
      DOTDOT
      NUM
      RBRAC
      OF
      type
        ARRAY
        LBRAC
        NUM
        DOTDOT
        NUM
        RBRAC
        OF
        type
          standard_type
            REAL
    SEMICOLON
  subprogram_declarations
    subprogram_declarations
      subprogram_declarations
        lambda
      subprogram_declaration
        subprogram_head
          PROCEDURE
          IDENTIFIER
          arguments
            LPAREN
            parameter_list
              optional_var
                lambda
              identifier_list
                IDENTIFIER
              COLON
              type
                ARRAY
                LBRAC
                NUM
                DOTDOT
                NUM
                RBRAC
                OF
                type
                  standard_type
                    INTEGER
            RPAREN
          SEMICOLON
        declarations
          declarations
            lambda
          VAR
          identifier_list
            identifier_list
              identifier_list
                IDENTIFIER
              COMMA
              IDENTIFIER
            COMMA
            IDENTIFIER
          COLON
          type
            standard_type
              INTEGER
          SEMICOLON
        subprogram_declarations
          lambda
        compound_statement
          PBEGIN
          optional_statements
            statement_list
              statement
                variable
                  IDENTIFIER
                  tail
                    lambda
                ASSIGNMENT
                expression
                  boolexpression
                    simple_expression
                      term
                        factor
                          IDENTIFIER
                          tail
                            lambda
          END
      SEMICOLON
    subprogram_declaration
      subprogram_head
        FUNCTION
        IDENTIFIER
        arguments
          LPAREN
          parameter_list
            optional_var
              lambda
            identifier_list
              identifier_list
                IDENTIFIER
              COMMA
              IDENTIFIER
            COLON
            type
              standard_type
                INTEGER
          RPAREN
        COLON
        standard_type
          INTEGER
        SEMICOLON
      declarations
        declarations
          lambda
        VAR
        identifier_list
          IDENTIFIER
        COLON
        type
          standard_type
            INTEGER
        SEMICOLON
      subprogram_declarations
        lambda
      compound_statement
        PBEGIN
        optional_statements
          statement_list
            statement
              variable
                IDENTIFIER
                tail
                  lambda
              ASSIGNMENT
              expression
                boolexpression
                  simple_expression
                    simple_expression
                      term
                        factor
                          IDENTIFIER
                          tail
                            lambda
                    addop
                      PLUS
                    term
                      factor
                        IDENTIFIER
                        tail
                          lambda
        END
    SEMICOLON
  compound_statement
    PBEGIN
    optional_statements
      statement_list
        statement_list
          statement_list
            statement_list
              statement_list
                statement_list
                  statement
                    variable
                      IDENTIFIER
                      tail
                        lambda
                    ASSIGNMENT
                    expression
                      boolexpression
                        simple_expression
                          term
                            factor
                              NUM
                SEMICOLON
                statement
                  WHILE
                  expression
                    boolexpression
                      simple_expression
                        term
                          factor
                            IDENTIFIER
                            tail
                              lambda
                      relop
                        LT
                      simple_expression
                        term
                          factor
                            NUM
                  DO
                  statement
                    compound_statement
                      PBEGIN
                      optional_statements
                        statement_list
                          statement_list
                            statement
                              variable
                                IDENTIFIER
                                tail
                                  lambda
                              ASSIGNMENT
                              expression
                                boolexpression
                                  simple_expression
                                    simple_expression
                                      term
                                        factor
                                          IDENTIFIER
                                          tail
                                            lambda
                                    addop
                                      PLUS
                                    term
                                      factor
                                        IDENTIFIER
                                        tail
                                          lambda
                          SEMICOLON
                          statement
                            variable
                              IDENTIFIER
                              tail
                                lambda
                            ASSIGNMENT
                            expression
                              boolexpression
                                simple_expression
                                  simple_expression
                                    term
                                      factor
                                        IDENTIFIER
                                        tail
                                          lambda
                                  addop
                                    PLUS
                                  term
                                    factor
                                      NUM
                      END
              SEMICOLON
              statement
                compound_statement
                  PBEGIN
                  optional_statements
                    statement_list
                      statement_list
                        statement_list
                          statement
                            variable
                              IDENTIFIER
                              tail
                                lambda
                            ASSIGNMENT
                            expression
                              boolexpression
                                simple_expression
                                  term
                                    factor
                                      NUM
                        SEMICOLON
                        statement
                          WHILE
                          expression
                            boolexpression
                              simple_expression
                                term
                                  factor
                                    IDENTIFIER
                                    tail
                                      lambda
                              relop
                                LT
                              simple_expression
                                term
                                  factor
                                    NUM
                          DO
                          statement
                            compound_statement
                              PBEGIN
                              optional_statements
                                statement_list
                                  statement_list
                                    statement
                                      variable
                                        IDENTIFIER
                                        tail
                                          LBRAC
                                          expression
                                            boolexpression
                                              simple_expression
                                                term
                                                  factor
                                                    IDENTIFIER
                                                    tail
                                                      lambda
                                          RBRAC
                                          tail
                                            lambda
                                      ASSIGNMENT
                                      expression
                                        boolexpression
                                          simple_expression
                                            simple_expression
                                              term
                                                factor
                                                  IDENTIFIER
                                                  tail
                                                    lambda
                                            addop
                                              PLUS
                                            term
                                              term
                                                factor
                                                  IDENTIFIER
                                                  tail
                                                    lambda
                                              mulop
                                                STAR
                                              factor
                                                LPAREN
                                                expression
                                                  boolexpression
                                                    simple_expression
                                                      simple_expression
                                                        term
                                                          factor
                                                            IDENTIFIER
                                                            tail
                                                              lambda
                                                      addop
                                                        MINUS
                                                      term
                                                        factor
                                                          NUM
                                                RPAREN
                                  SEMICOLON
                                  statement
                                    variable
                                      IDENTIFIER
                                      tail
                                        lambda
                                    ASSIGNMENT
                                    expression
                                      boolexpression
                                        simple_expression
                                          simple_expression
                                            term
                                              factor
                                                IDENTIFIER
                                                tail
                                                  lambda
                                          addop
                                            PLUS
                                          term
                                            factor
                                              NUM
                              END
                      SEMICOLON
                      statement
                        procedure_statement
                          IDENTIFIER
                          LBRAC
                          expression_list
                            expression
                              boolexpression
                                simple_expression
                                  term
                                    factor
                                      IDENTIFIER
                                      tail
                                        lambda
                          RPAREN
                  END
            SEMICOLON
            statement
              variable
                IDENTIFIER
                tail
                  LBRAC
                  expression
                    boolexpression
                      simple_expression
                        term
                          factor
                            NUM
                  RBRAC
                  tail
                    LBRAC
                    expression
                      boolexpression
                        simple_expression
                          term
                            factor
                              NUM
                    RBRAC
                    tail
                      lambda
              ASSIGNMENT
              expression
                boolexpression
                  simple_expression
                    term
                      factor
                        NUM
          SEMICOLON
          statement
            variable
              IDENTIFIER
              tail
                LBRAC
                expression
                  boolexpression
                    simple_expression
                      term
                        factor
                          NUM
                RBRAC
                tail
                  LBRAC
                  expression
                    boolexpression
                      simple_expression
                        term
                          factor
                            NUM
                  RBRAC
                  tail
                    lambda
            ASSIGNMENT
            expression
              boolexpression
                simple_expression
                  simple_expression
                    term
                      factor
                        IDENTIFIER
                        tail
                          LBRAC
                          expression
                            boolexpression
                              simple_expression
                                term
                                  factor
                                    NUM
                          RBRAC
                          tail
                            LBRAC
                            expression
                              boolexpression
                                simple_expression
                                  term
                                    factor
                                      NUM
                            RBRAC
                            tail
                              lambda
                  addop
                    PLUS
                  term
                    factor
                      NUM
        SEMICOLON
        statement
          variable
            IDENTIFIER
            tail
              LBRAC
              expression
                boolexpression
                  simple_expression
                    simple_expression
                      term
                        factor
                          IDENTIFIER
                          tail
                            lambda
                    addop
                      PLUS
                    term
                      factor
                        NUM
              RBRAC
              tail
                LBRAC
                expression
                  boolexpression
                    simple_expression
                      simple_expression
                        term
                          factor
                            IDENTIFIER
                            tail
                              lambda
                      addop
                        PLUS
                      term
                        factor
                          NUM
                RBRAC
                tail
                  lambda
          ASSIGNMENT
          expression
            boolexpression
              simple_expression
                term
                  factor
                    NUM
    END
  DOT
------------------------- END -------------------------
